name: Build

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/*.yml"
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "rust-toolchain.toml"
      - "rustfmt.toml"
  push:
    branches:
      - main

# Ensures only one build is run per branch, unless pushing to main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_ARGS: ${{ github.ref == 'refs/heads/main' && '--release' || '' }}
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    if: ${{ !startsWith(github.head_ref, 'release/') }}
    name: Rustfmt
    runs-on: ubuntu-latest
    continue-on-error: false
    env:
      SKIP_WASM_BUILD: 1
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --all -- --check

  lint:
    if: ${{ !startsWith(github.head_ref, 'release/') }}
    name: Clippy
    runs-on: ubuntu-latest
    continue-on-error: false
    env:
      SKIP_WASM_BUILD: 1
    steps:
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: cargo clippy --all-features --all-targets ${{ env.CARGO_ARGS }} -- -D warnings

  test:
    if: ${{ !startsWith(github.head_ref, 'release/') }}
    name: Test
    runs-on: ubuntu-latest
    continue-on-error: false
    env:
      SKIP_WASM_BUILD: 1
    steps:
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-
      - run: cargo test --workspace --all-features --all-targets ${{ env.CARGO_ARGS }}

  coverage:
    if: ${{ !startsWith(github.head_ref, 'release/') }}
    name: Coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:0.22.0
      options: --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v3
      - name: Generate code coverage
        run: |
          cargo tarpaulin --no-fail-fast --workspace --out Xml \
            --exclude \
                ajuna-cli ajuna-node ajuna-primitives ajuna-rpc ajuna-service \
                ajuna-runtime ajuna-solo-runtime bajun-runtime \
            --exclude-files \
                node/* rpc/* runtime/* \
                benchmarking.rs weights.rs
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  notify:
    if: ${{ !startsWith(github.head_ref, 'release/') }}
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          job_name: Build
          status: ${{ job.status }}
          fields: repo,pullRequest,commit,author,workflow,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
