// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_ajuna_gameregistry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/ajuna-solo
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-gameregistry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./HEADER-AGPL
// --output=./pallets/ajuna-gameregistry/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_gameregistry.
pub trait WeightInfo {
	fn queue() -> Weight;
	fn drop_game() -> Weight;
	fn ack_game(n: u32, ) -> Weight;
	fn finish_game() -> Weight;
}

/// Weights for pallet_ajuna_gameregistry using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: GameRegistry Players (r:1 w:2)
	// Storage: Matchmaker PlayerQueue (r:1 w:2)
	// Storage: Matchmaker Brackets (r:1 w:1)
	// Storage: Matchmaker Players (r:3 w:2)
	// Storage: Runner Nonce (r:1 w:1)
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Queued (r:1 w:1)
	fn queue() -> Weight {
		(174_507_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: Runner Runners (r:1 w:1)
	fn drop_game() -> Weight {
		(12_081_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Queued (r:0 w:1)
	fn ack_game(n: u32, ) -> Weight {
		(14_256_000 as Weight)
			// Standard Error: 1_038_000
			.saturating_add((23_006_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Players (r:0 w:2)
	fn finish_game() -> Weight {
		(52_159_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: GameRegistry Players (r:1 w:2)
	// Storage: Matchmaker PlayerQueue (r:1 w:2)
	// Storage: Matchmaker Brackets (r:1 w:1)
	// Storage: Matchmaker Players (r:3 w:2)
	// Storage: Runner Nonce (r:1 w:1)
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Queued (r:1 w:1)
	fn queue() -> Weight {
		(174_507_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: Runner Runners (r:1 w:1)
	fn drop_game() -> Weight {
		(12_081_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Queued (r:0 w:1)
	fn ack_game(n: u32, ) -> Weight {
		(14_256_000 as Weight)
			// Standard Error: 1_038_000
			.saturating_add((23_006_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Runner Runners (r:1 w:1)
	// Storage: GameRegistry Players (r:0 w:2)
	fn finish_game() -> Weight {
		(52_159_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}

