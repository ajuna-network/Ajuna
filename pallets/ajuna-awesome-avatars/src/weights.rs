// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_awesome_avatars
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weight-calculation`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-awesome-avatars
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-awesome-avatars/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_awesome_avatars.
pub trait WeightInfo {
	fn mint_free(n: u32, ) -> Weight;
	fn mint_normal(n: u32, ) -> Weight;
	fn forge(n: u32, ) -> Weight;
	fn transfer_avatar_normal(n: u32, ) -> Weight;
	fn transfer_avatar_organizer(n: u32, ) -> Weight;
	fn transfer_free_mints() -> Weight;
	fn set_price() -> Weight;
	fn remove_price() -> Weight;
	fn buy(n: u32, ) -> Weight;
	fn upgrade_storage() -> Weight;
	fn set_organizer() -> Weight;
	fn set_collection_id() -> Weight;
	fn set_treasurer() -> Weight;
	fn claim_treasury() -> Weight;
	fn set_season() -> Weight;
	fn update_global_config() -> Weight;
	fn set_free_mints() -> Weight;
	fn lock_avatar(n: u32, ) -> Weight;
	fn unlock_avatar(n: u32, ) -> Weight;
	fn fix_variation() -> Weight;
	fn set_service_account() -> Weight;
	fn prepare_avatar() -> Weight;
	fn unprepare_avatar() -> Weight;
	fn prepare_ipfs() -> Weight;
}

/// Weights for pallet_ajuna_awesome_avatars using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(_n: u32, ) -> Weight {
		// Minimum execution time: 172_086 nanoseconds.
		Weight::from_ref_time(446_588_408 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(n: u32, ) -> Weight {
		// Minimum execution time: 224_718 nanoseconds.
		Weight::from_ref_time(528_116_364 as u64)
			// Standard Error: 111_096
			.saturating_add(Weight::from_ref_time(714_856 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:5 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Minimum execution time: 201_859 nanoseconds.
		Weight::from_ref_time(398_187_347 as u64)
			// Standard Error: 65_391
			.saturating_add(Weight::from_ref_time(610_072 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(28 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Minimum execution time: 225_763 nanoseconds.
		Weight::from_ref_time(579_879_208 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Minimum execution time: 238_540 nanoseconds.
		Weight::from_ref_time(590_637_328 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn transfer_free_mints() -> Weight {
		// Minimum execution time: 39_315 nanoseconds.
		Weight::from_ref_time(96_591_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Minimum execution time: 100_623 nanoseconds.
		Weight::from_ref_time(124_636_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn remove_price() -> Weight {
		// Minimum execution time: 80_810 nanoseconds.
		Weight::from_ref_time(129_610_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Minimum execution time: 200_277 nanoseconds.
		Weight::from_ref_time(363_073_274 as u64)
			// Standard Error: 75_988
			.saturating_add(Weight::from_ref_time(2_243_108 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	fn upgrade_storage() -> Weight {
		// Minimum execution time: 170_285 nanoseconds.
		Weight::from_ref_time(259_691_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_organizer() -> Weight {
		// Minimum execution time: 31_701 nanoseconds.
		Weight::from_ref_time(43_971_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collection_id() -> Weight {
		// Minimum execution time: 46_946 nanoseconds.
		Weight::from_ref_time(63_029_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn set_treasurer() -> Weight {
		// Minimum execution time: 27_884 nanoseconds.
		Weight::from_ref_time(41_660_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_treasury() -> Weight {
		// Minimum execution time: 155_925 nanoseconds.
		Weight::from_ref_time(203_631_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	fn set_season() -> Weight {
		// Minimum execution time: 64_366 nanoseconds.
		Weight::from_ref_time(94_363_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	fn update_global_config() -> Weight {
		// Minimum execution time: 41_093 nanoseconds.
		Weight::from_ref_time(49_141_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn set_free_mints() -> Weight {
		// Minimum execution time: 42_505 nanoseconds.
		Weight::from_ref_time(45_266_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Nft Item (r:1 w:1)
	// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	// Storage: Nft Collection (r:1 w:1)
	// Proof: Nft Collection (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	// Storage: Nft CollectionConfigOf (r:1 w:0)
	// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Nft Attribute (r:6 w:6)
	// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	// Storage: NftTransfer NftStatuses (r:0 w:1)
	// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	// Storage: Nft Account (r:0 w:1)
	// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 407_556 nanoseconds.
		Weight::from_ref_time(864_812_029 as u64)
			// Standard Error: 147_515
			.saturating_add(Weight::from_ref_time(282_724 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(20 as u64))
			.saturating_add(T::DbWeight::get().writes(17 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: NftTransfer NftStatuses (r:1 w:1)
	// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	// Storage: Nft Attribute (r:6 w:6)
	// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	// Storage: Nft Collection (r:1 w:1)
	// Proof: Nft Collection (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: Nft Item (r:1 w:1)
	// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Nft ItemMetadataOf (r:1 w:0)
	// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
	// Storage: Nft Account (r:0 w:1)
	// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	// Storage: Nft ItemPriceOf (r:0 w:1)
	// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
	// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
	// Storage: Nft PendingSwapOf (r:0 w:1)
	// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 339_365 nanoseconds.
		Weight::from_ref_time(726_756_467 as u64)
			// Standard Error: 148_118
			.saturating_add(Weight::from_ref_time(732_634 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(20 as u64))
			.saturating_add(T::DbWeight::get().writes(19 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn fix_variation() -> Weight {
		// Minimum execution time: 16_791 nanoseconds.
		Weight::from_ref_time(24_915_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_service_account() -> Weight {
		// Minimum execution time: 15_318 nanoseconds.
		Weight::from_ref_time(16_042_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn prepare_avatar() -> Weight {
		// Minimum execution time: 107_701 nanoseconds.
		Weight::from_ref_time(260_465_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn unprepare_avatar() -> Weight {
		// Minimum execution time: 37_196 nanoseconds.
		Weight::from_ref_time(81_731_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn prepare_ipfs() -> Weight {
		// Minimum execution time: 86_006 nanoseconds.
		Weight::from_ref_time(94_104_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(_n: u32, ) -> Weight {
		// Minimum execution time: 172_086 nanoseconds.
		Weight::from_ref_time(446_588_408 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(n: u32, ) -> Weight {
		// Minimum execution time: 224_718 nanoseconds.
		Weight::from_ref_time(528_116_364 as u64)
			// Standard Error: 111_096
			.saturating_add(Weight::from_ref_time(714_856 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(12 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:5 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Minimum execution time: 201_859 nanoseconds.
		Weight::from_ref_time(398_187_347 as u64)
			// Standard Error: 65_391
			.saturating_add(Weight::from_ref_time(610_072 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(28 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Minimum execution time: 225_763 nanoseconds.
		Weight::from_ref_time(579_879_208 as u64)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Minimum execution time: 238_540 nanoseconds.
		Weight::from_ref_time(590_637_328 as u64)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn transfer_free_mints() -> Weight {
		// Minimum execution time: 39_315 nanoseconds.
		Weight::from_ref_time(96_591_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Minimum execution time: 100_623 nanoseconds.
		Weight::from_ref_time(124_636_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn remove_price() -> Weight {
		// Minimum execution time: 80_810 nanoseconds.
		Weight::from_ref_time(129_610_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Minimum execution time: 200_277 nanoseconds.
		Weight::from_ref_time(363_073_274 as u64)
			// Standard Error: 75_988
			.saturating_add(Weight::from_ref_time(2_243_108 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	fn upgrade_storage() -> Weight {
		// Minimum execution time: 170_285 nanoseconds.
		Weight::from_ref_time(259_691_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_organizer() -> Weight {
		// Minimum execution time: 31_701 nanoseconds.
		Weight::from_ref_time(43_971_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collection_id() -> Weight {
		// Minimum execution time: 46_946 nanoseconds.
		Weight::from_ref_time(63_029_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn set_treasurer() -> Weight {
		// Minimum execution time: 27_884 nanoseconds.
		Weight::from_ref_time(41_660_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_treasury() -> Weight {
		// Minimum execution time: 155_925 nanoseconds.
		Weight::from_ref_time(203_631_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	fn set_season() -> Weight {
		// Minimum execution time: 64_366 nanoseconds.
		Weight::from_ref_time(94_363_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	fn update_global_config() -> Weight {
		// Minimum execution time: 41_093 nanoseconds.
		Weight::from_ref_time(49_141_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn set_free_mints() -> Weight {
		// Minimum execution time: 42_505 nanoseconds.
		Weight::from_ref_time(45_266_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Nft Item (r:1 w:1)
	// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	// Storage: Nft Collection (r:1 w:1)
	// Proof: Nft Collection (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	// Storage: Nft CollectionConfigOf (r:1 w:0)
	// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Nft Attribute (r:6 w:6)
	// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	// Storage: NftTransfer NftStatuses (r:0 w:1)
	// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	// Storage: Nft Account (r:0 w:1)
	// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 407_556 nanoseconds.
		Weight::from_ref_time(864_812_029 as u64)
			// Standard Error: 147_515
			.saturating_add(Weight::from_ref_time(282_724 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(20 as u64))
			.saturating_add(RocksDbWeight::get().writes(17 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: NftTransfer NftStatuses (r:1 w:1)
	// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	// Storage: Nft Attribute (r:6 w:6)
	// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	// Storage: Nft Collection (r:1 w:1)
	// Proof: Nft Collection (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: Nft Item (r:1 w:1)
	// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Nft ItemMetadataOf (r:1 w:0)
	// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
	// Storage: Nft Account (r:0 w:1)
	// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	// Storage: Nft ItemPriceOf (r:0 w:1)
	// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
	// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
	// Storage: Nft PendingSwapOf (r:0 w:1)
	// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 339_365 nanoseconds.
		Weight::from_ref_time(726_756_467 as u64)
			// Standard Error: 148_118
			.saturating_add(Weight::from_ref_time(732_634 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(20 as u64))
			.saturating_add(RocksDbWeight::get().writes(19 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn fix_variation() -> Weight {
		// Minimum execution time: 16_791 nanoseconds.
		Weight::from_ref_time(24_915_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_service_account() -> Weight {
		// Minimum execution time: 15_318 nanoseconds.
		Weight::from_ref_time(16_042_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn prepare_avatar() -> Weight {
		// Minimum execution time: 107_701 nanoseconds.
		Weight::from_ref_time(260_465_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn unprepare_avatar() -> Weight {
		// Minimum execution time: 37_196 nanoseconds.
		Weight::from_ref_time(81_731_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn prepare_ipfs() -> Weight {
		// Minimum execution time: 86_006 nanoseconds.
		Weight::from_ref_time(94_104_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
