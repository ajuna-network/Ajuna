// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_awesome_avatars
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weight-calculation`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-awesome-avatars
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-awesome-avatars/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_awesome_avatars.
pub trait WeightInfo {
	fn mint_free(n: u32, ) -> Weight;
	fn mint_normal(n: u32, ) -> Weight;
	fn forge(n: u32, ) -> Weight;
	fn transfer_free_mints() -> Weight;
	fn set_price() -> Weight;
	fn remove_price() -> Weight;
	fn buy(n: u32, ) -> Weight;
	fn set_organizer() -> Weight;
	fn set_treasurer() -> Weight;
	fn set_season() -> Weight;
	fn update_global_config() -> Weight;
	fn issue_free_mints() -> Weight;
}

/// Weights for pallet_ajuna_awesome_avatars using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LastMintedBlockNumbers (r:1 w:1)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars FreeMints (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 994]`.
	fn mint_free(n: u32, ) -> Weight {
		(328_426_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((204_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LastMintedBlockNumbers (r:1 w:1)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 994]`.
	fn mint_normal(n: u32, ) -> Weight {
		(369_645_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((189_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// The range of component `n` is `[5, 1000]`.
	fn forge(n: u32, ) -> Weight {
		(316_346_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((532_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars FreeMints (r:2 w:2)
	fn transfer_free_mints() -> Weight {
		(59_798_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	fn set_price() -> Weight {
		(257_725_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	fn remove_price() -> Weight {
		(240_445_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// The range of component `n` is `[1, 1000]`.
	fn buy(n: u32, ) -> Weight {
		(321_848_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((758_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		(40_155_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	fn set_treasurer() -> Weight {
		(41_019_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	fn set_season() -> Weight {
		(70_606_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	fn update_global_config() -> Weight {
		(53_172_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars FreeMints (r:1 w:1)
	fn issue_free_mints() -> Weight {
		(65_015_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LastMintedBlockNumbers (r:1 w:1)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars FreeMints (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 994]`.
	fn mint_free(n: u32, ) -> Weight {
		(328_426_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((204_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LastMintedBlockNumbers (r:1 w:1)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 994]`.
	fn mint_normal(n: u32, ) -> Weight {
		(369_645_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((189_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// The range of component `n` is `[5, 1000]`.
	fn forge(n: u32, ) -> Weight {
		(316_346_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((532_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars FreeMints (r:2 w:2)
	fn transfer_free_mints() -> Weight {
		(59_798_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	fn set_price() -> Weight {
		(257_725_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	fn remove_price() -> Weight {
		(240_445_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// The range of component `n` is `[1, 1000]`.
	fn buy(n: u32, ) -> Weight {
		(321_848_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((758_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		(40_155_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	fn set_treasurer() -> Weight {
		(41_019_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	fn set_season() -> Weight {
		(70_606_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	fn update_global_config() -> Weight {
		(53_172_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars FreeMints (r:1 w:1)
	fn issue_free_mints() -> Weight {
		(65_015_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
