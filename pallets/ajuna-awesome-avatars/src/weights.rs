// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_awesome_avatars
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weight-calculation`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-awesome-avatars
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-awesome-avatars/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_awesome_avatars.
pub trait WeightInfo {
	fn mint_free(n: u32, ) -> Weight;
	fn mint_normal(n: u32, ) -> Weight;
	fn forge(n: u32, ) -> Weight;
	fn transfer_avatar_normal(n: u32, ) -> Weight;
	fn transfer_avatar_organizer(n: u32, ) -> Weight;
	fn transfer_free_mints() -> Weight;
	fn set_price() -> Weight;
	fn remove_price() -> Weight;
	fn buy(n: u32, ) -> Weight;
	fn upgrade_storage() -> Weight;
	fn set_organizer() -> Weight;
	fn set_collection_id() -> Weight;
	fn set_treasurer() -> Weight;
	fn claim_treasury() -> Weight;
	fn set_season() -> Weight;
	fn update_global_config() -> Weight;
	fn set_free_mints() -> Weight;
	fn lock_avatar(n: u32, ) -> Weight;
	fn unlock_avatar(n: u32, ) -> Weight;
	fn fix_variation() -> Weight;
	fn set_service_account() -> Weight;
	fn prepare_avatar() -> Weight;
	fn unprepare_avatar() -> Weight;
	fn prepare_ipfs() -> Weight;
}

/// Weights for pallet_ajuna_awesome_avatars using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(n: u32, ) -> Weight {
		// Minimum execution time: 195_610 nanoseconds.
		Weight::from_ref_time(399_068_531 as u64)
			// Standard Error: 93_400
			.saturating_add(Weight::from_ref_time(834_854 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(n: u32, ) -> Weight {
		// Minimum execution time: 245_631 nanoseconds.
		Weight::from_ref_time(571_511_599 as u64)
			// Standard Error: 127_630
			.saturating_add(Weight::from_ref_time(851_838 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Minimum execution time: 165_122 nanoseconds.
		Weight::from_ref_time(337_822_519 as u64)
			// Standard Error: 69_255
			.saturating_add(Weight::from_ref_time(1_294_340 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(24 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Minimum execution time: 269_282 nanoseconds.
		Weight::from_ref_time(625_426_344 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Minimum execution time: 278_054 nanoseconds.
		Weight::from_ref_time(704_413_104 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	fn transfer_free_mints() -> Weight {
		// Minimum execution time: 74_742 nanoseconds.
		Weight::from_ref_time(111_796_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	fn set_price() -> Weight {
		// Minimum execution time: 118_567 nanoseconds.
		Weight::from_ref_time(192_031_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	fn remove_price() -> Weight {
		// Minimum execution time: 126_190 nanoseconds.
		Weight::from_ref_time(217_915_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Minimum execution time: 204_393 nanoseconds.
		Weight::from_ref_time(466_518_262 as u64)
			// Standard Error: 113_528
			.saturating_add(Weight::from_ref_time(1_335_529 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	fn upgrade_storage() -> Weight {
		// Minimum execution time: 110_922 nanoseconds.
		Weight::from_ref_time(293_210_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		// Minimum execution time: 27_115 nanoseconds.
		Weight::from_ref_time(58_830_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	fn set_collection_id() -> Weight {
		// Minimum execution time: 56_707 nanoseconds.
		Weight::from_ref_time(76_645_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	fn set_treasurer() -> Weight {
		// Minimum execution time: 31_188 nanoseconds.
		Weight::from_ref_time(59_024_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim_treasury() -> Weight {
		// Minimum execution time: 105_560 nanoseconds.
		Weight::from_ref_time(233_121_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	fn set_season() -> Weight {
		// Minimum execution time: 44_965 nanoseconds.
		Weight::from_ref_time(102_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	fn update_global_config() -> Weight {
		// Minimum execution time: 61_416 nanoseconds.
		Weight::from_ref_time(83_261_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	fn set_free_mints() -> Weight {
		// Minimum execution time: 67_929 nanoseconds.
		Weight::from_ref_time(85_833_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Storage: Nft Item (r:1 w:1)
	// Storage: Nft Collection (r:1 w:1)
	// Storage: Nft CollectionConfigOf (r:1 w:0)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft Attribute (r:5 w:5)
	// Storage: NftTransfer NftStatuses (r:0 w:1)
	// Storage: Nft Account (r:0 w:1)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 321_864 nanoseconds.
		Weight::from_ref_time(674_745_164 as u64)
			// Standard Error: 155_499
			.saturating_add(Weight::from_ref_time(940_090 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(20 as u64))
			.saturating_add(T::DbWeight::get().writes(15 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Storage: NftTransfer NftStatuses (r:1 w:1)
	// Storage: Nft Attribute (r:5 w:5)
	// Storage: Nft Collection (r:1 w:1)
	// Storage: Nft Item (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Storage: Nft Account (r:0 w:1)
	// Storage: Nft ItemPriceOf (r:0 w:1)
	// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: Nft PendingSwapOf (r:0 w:1)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 312_628 nanoseconds.
		Weight::from_ref_time(548_815_385 as u64)
			// Standard Error: 158_843
			.saturating_add(Weight::from_ref_time(2_064_874 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(18 as u64))
			.saturating_add(T::DbWeight::get().writes(18 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	fn fix_variation() -> Weight {
		// Minimum execution time: 47_678 nanoseconds.
		Weight::from_ref_time(53_182_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	fn set_service_account() -> Weight {
		// Minimum execution time: 27_872 nanoseconds.
		Weight::from_ref_time(57_423_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:1)
	fn prepare_avatar() -> Weight {
		// Minimum execution time: 61_483 nanoseconds.
		Weight::from_ref_time(137_124_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:1)
	fn unprepare_avatar() -> Weight {
		// Minimum execution time: 58_950 nanoseconds.
		Weight::from_ref_time(99_248_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:0)
	fn prepare_ipfs() -> Weight {
		// Minimum execution time: 112_694 nanoseconds.
		Weight::from_ref_time(124_205_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(n: u32, ) -> Weight {
		// Minimum execution time: 195_610 nanoseconds.
		Weight::from_ref_time(399_068_531 as u64)
			// Standard Error: 93_400
			.saturating_add(Weight::from_ref_time(834_854 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(n: u32, ) -> Weight {
		// Minimum execution time: 245_631 nanoseconds.
		Weight::from_ref_time(571_511_599 as u64)
			// Standard Error: 127_630
			.saturating_add(Weight::from_ref_time(851_838 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(12 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:5 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	// Storage: AwesomeAvatars Avatars (r:5 w:5)
	// Storage: Randomness RandomMaterial (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:1 w:1)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Minimum execution time: 165_122 nanoseconds.
		Weight::from_ref_time(337_822_519 as u64)
			// Standard Error: 69_255
			.saturating_add(Weight::from_ref_time(1_294_340 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(24 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Minimum execution time: 269_282 nanoseconds.
		Weight::from_ref_time(625_426_344 as u64)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Minimum execution time: 278_054 nanoseconds.
		Weight::from_ref_time(704_413_104 as u64)
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	fn transfer_free_mints() -> Weight {
		// Minimum execution time: 74_742 nanoseconds.
		Weight::from_ref_time(111_796_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:0 w:1)
	fn set_price() -> Weight {
		// Minimum execution time: 118_567 nanoseconds.
		Weight::from_ref_time(192_031_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	fn remove_price() -> Weight {
		// Minimum execution time: 126_190 nanoseconds.
		Weight::from_ref_time(217_915_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:1)
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Minimum execution time: 204_393 nanoseconds.
		Weight::from_ref_time(466_518_262 as u64)
			// Standard Error: 113_528
			.saturating_add(Weight::from_ref_time(1_335_529 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
	}
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	fn upgrade_storage() -> Weight {
		// Minimum execution time: 110_922 nanoseconds.
		Weight::from_ref_time(293_210_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		// Minimum execution time: 27_115 nanoseconds.
		Weight::from_ref_time(58_830_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	fn set_collection_id() -> Weight {
		// Minimum execution time: 56_707 nanoseconds.
		Weight::from_ref_time(76_645_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	fn set_treasurer() -> Weight {
		// Minimum execution time: 31_188 nanoseconds.
		Weight::from_ref_time(59_024_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonId (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:0)
	// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	// Storage: AwesomeAvatars Treasury (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim_treasury() -> Weight {
		// Minimum execution time: 105_560 nanoseconds.
		Weight::from_ref_time(233_121_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Seasons (r:1 w:1)
	fn set_season() -> Weight {
		// Minimum execution time: 44_965 nanoseconds.
		Weight::from_ref_time(102_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	fn update_global_config() -> Weight {
		// Minimum execution time: 61_416 nanoseconds.
		Weight::from_ref_time(83_261_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Organizer (r:1 w:0)
	// Storage: AwesomeAvatars Accounts (r:1 w:1)
	fn set_free_mints() -> Weight {
		// Minimum execution time: 67_929 nanoseconds.
		Weight::from_ref_time(85_833_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Storage: AwesomeAvatars Preparation (r:1 w:0)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Storage: Nft Item (r:1 w:1)
	// Storage: Nft Collection (r:1 w:1)
	// Storage: Nft CollectionConfigOf (r:1 w:0)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft Attribute (r:5 w:5)
	// Storage: NftTransfer NftStatuses (r:0 w:1)
	// Storage: Nft Account (r:0 w:1)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 321_864 nanoseconds.
		Weight::from_ref_time(674_745_164 as u64)
			// Standard Error: 155_499
			.saturating_add(Weight::from_ref_time(940_090 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(20 as u64))
			.saturating_add(RocksDbWeight::get().writes(15 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	// Storage: AwesomeAvatars Owners (r:2 w:2)
	// Storage: AwesomeAvatars Accounts (r:1 w:0)
	// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	// Storage: NftTransfer NftStatuses (r:1 w:1)
	// Storage: Nft Attribute (r:5 w:5)
	// Storage: Nft Collection (r:1 w:1)
	// Storage: Nft Item (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nft ItemConfigOf (r:1 w:1)
	// Storage: Nft Account (r:0 w:1)
	// Storage: Nft ItemPriceOf (r:0 w:1)
	// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: Nft PendingSwapOf (r:0 w:1)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Minimum execution time: 312_628 nanoseconds.
		Weight::from_ref_time(548_815_385 as u64)
			// Standard Error: 158_843
			.saturating_add(Weight::from_ref_time(2_064_874 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(18 as u64))
			.saturating_add(RocksDbWeight::get().writes(18 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:1)
	fn fix_variation() -> Weight {
		// Minimum execution time: 47_678 nanoseconds.
		Weight::from_ref_time(53_182_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	fn set_service_account() -> Weight {
		// Minimum execution time: 27_872 nanoseconds.
		Weight::from_ref_time(57_423_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars Trade (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:1)
	fn prepare_avatar() -> Weight {
		// Minimum execution time: 61_483 nanoseconds.
		Weight::from_ref_time(137_124_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars Avatars (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:1)
	fn unprepare_avatar() -> Weight {
		// Minimum execution time: 58_950 nanoseconds.
		Weight::from_ref_time(99_248_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	// Storage: AwesomeAvatars Preparation (r:1 w:1)
	// Storage: AwesomeAvatars FrozenAvatars (r:1 w:0)
	fn prepare_ipfs() -> Weight {
		// Minimum execution time: 112_694 nanoseconds.
		Weight::from_ref_time(124_205_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
