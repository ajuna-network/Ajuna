
//! Autogenerated weights for pallet_ajuna_awesome_avatars
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `weight-calculation`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-awesome-avatars
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-awesome-avatars/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_awesome_avatars.
pub trait WeightInfo {
	fn mint_free(n: u32, ) -> Weight;
	fn mint_normal(n: u32, ) -> Weight;
	fn forge(n: u32, ) -> Weight;
	fn transfer_avatar_normal(n: u32, ) -> Weight;
	fn transfer_avatar_organizer(n: u32, ) -> Weight;
	fn transfer_free_mints() -> Weight;
	fn set_price() -> Weight;
	fn remove_price() -> Weight;
	fn buy(n: u32, ) -> Weight;
	fn upgrade_storage() -> Weight;
	fn set_organizer() -> Weight;
	fn set_collection_id() -> Weight;
	fn set_treasurer() -> Weight;
	fn claim_treasury() -> Weight;
	fn set_season() -> Weight;
	fn update_global_config() -> Weight;
	fn set_free_mints() -> Weight;
	fn lock_avatar(n: u32, ) -> Weight;
	fn unlock_avatar(n: u32, ) -> Weight;
	fn fix_variation() -> Weight;
	fn set_service_account() -> Weight;
	fn prepare_avatar() -> Weight;
	fn unprepare_avatar() -> Weight;
	fn prepare_ipfs() -> Weight;
}

/// Weights for pallet_ajuna_awesome_avatars using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1895 + n * (32 ±0)`
		//  Estimated: `36330`
		// Minimum execution time: 194_047_000 picoseconds.
		Weight::from_parts(483_920_704, 36330)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1947 + n * (32 ±0)`
		//  Estimated: `42416`
		// Minimum execution time: 264_709_000 picoseconds.
		Weight::from_parts(590_063_817, 42416)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:5 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:5 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:5 w:5)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2973 + n * (38 ±0)`
		//  Estimated: `91620`
		// Minimum execution time: 174_953_000 picoseconds.
		Weight::from_parts(264_079_921, 91620)
			// Standard Error: 99_319
			.saturating_add(Weight::from_parts(1_060_847, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(28_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `14492`
		//  Estimated: `53371`
		// Minimum execution time: 261_716_000 picoseconds.
		Weight::from_parts(602_031_052, 53371)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `14590`
		//  Estimated: `53371`
		// Minimum execution time: 269_080_000 picoseconds.
		Weight::from_parts(546_040_392, 53371)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn transfer_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273`
		//  Estimated: `15679`
		// Minimum execution time: 70_760_000 picoseconds.
		Weight::from_parts(96_593_000, 15679)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:0 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1239`
		//  Estimated: `12326`
		// Minimum execution time: 74_513_000 picoseconds.
		Weight::from_parts(147_450_000, 12326)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn remove_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1309`
		//  Estimated: `8763`
		// Minimum execution time: 69_836_000 picoseconds.
		Weight::from_parts(80_675_000, 8763)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654 + n * (65 ±0)`
		//  Estimated: `53919`
		// Minimum execution time: 198_708_000 picoseconds.
		Weight::from_parts(432_442_362, 53919)
			// Standard Error: 139_740
			.saturating_add(Weight::from_parts(571_915, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	fn upgrade_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `20314`
		// Minimum execution time: 112_538_000 picoseconds.
		Weight::from_parts(314_589_000, 20314)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:0 w:1)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_organizer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 38_751_000 picoseconds.
		Weight::from_parts(47_772_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collection_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 41_680_000 picoseconds.
		Weight::from_parts(61_092_000, 1517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	/// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn set_treasurer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_766_000 picoseconds.
		Weight::from_parts(47_137_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	/// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_treasury() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1657`
		//  Estimated: `19289`
		// Minimum execution time: 88_285_000 picoseconds.
		Weight::from_parts(202_183_000, 19289)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:1)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	fn set_season() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `6134`
		// Minimum execution time: 56_283_000 picoseconds.
		Weight::from_parts(92_760_000, 6134)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	fn update_global_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 30_453_000 picoseconds.
		Weight::from_parts(70_829_000, 1517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn set_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `9045`
		// Minimum execution time: 46_165_000 picoseconds.
		Weight::from_parts(73_012_000, 9045)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nft Item (r:1 w:1)
	/// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	/// Storage: Nft Collection (r:1 w:1)
	/// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nft CollectionConfigOf (r:1 w:0)
	/// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nft ItemConfigOf (r:1 w:1)
	/// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nft Attribute (r:6 w:6)
	/// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	/// Storage: NftTransfer NftStatuses (r:0 w:1)
	/// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Nft Account (r:0 w:1)
	/// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1490 + n * (34 ±0)`
		//  Estimated: `79884`
		// Minimum execution time: 394_602_000 picoseconds.
		Weight::from_parts(917_538_684, 79884)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(17_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NftTransfer NftStatuses (r:1 w:1)
	/// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Nft Attribute (r:6 w:6)
	/// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	/// Storage: Nft Collection (r:1 w:1)
	/// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nft ItemConfigOf (r:1 w:1)
	/// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// Storage: Nft Item (r:1 w:1)
	/// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nft ItemMetadataOf (r:1 w:0)
	/// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
	/// Storage: Nft Account (r:0 w:1)
	/// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Nft ItemPriceOf (r:0 w:1)
	/// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
	/// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	/// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
	/// Storage: Nft PendingSwapOf (r:0 w:1)
	/// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2274 + n * (34 ±0)`
		//  Estimated: `79981`
		// Minimum execution time: 374_904_000 picoseconds.
		Weight::from_parts(439_025_748, 79981)
			// Standard Error: 166_769
			.saturating_add(Weight::from_parts(2_161_716, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn fix_variation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3637`
		// Minimum execution time: 19_054_000 picoseconds.
		Weight::from_parts(19_570_000, 3637)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_service_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_240_000 picoseconds.
		Weight::from_parts(47_057_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn prepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `649`
		//  Estimated: `23552`
		// Minimum execution time: 190_495_000 picoseconds.
		Weight::from_parts(209_675_000, 23552)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn unprepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `8829`
		// Minimum execution time: 39_953_000 picoseconds.
		Weight::from_parts(42_917_000, 8829)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn prepare_ipfs() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `6709`
		// Minimum execution time: 90_643_000 picoseconds.
		Weight::from_parts(97_488_000, 6709)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_free(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1895 + n * (32 ±0)`
		//  Estimated: `36330`
		// Minimum execution time: 194_047_000 picoseconds.
		Weight::from_parts(483_920_704, 36330)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:0 w:6)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 194]`.
	fn mint_normal(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1947 + n * (32 ±0)`
		//  Estimated: `42416`
		// Minimum execution time: 264_709_000 picoseconds.
		Weight::from_parts(590_063_817, 42416)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(12_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:5 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:5 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:5 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:5 w:5)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: Randomness RandomMaterial (r:1 w:0)
	/// Proof: Randomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:1 w:1)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars SeasonStats (r:1 w:1)
	/// Proof: AwesomeAvatars SeasonStats (max_values: None, max_size: Some(42), added: 2517, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 200]`.
	fn forge(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2973 + n * (38 ±0)`
		//  Estimated: `91620`
		// Minimum execution time: 174_953_000 picoseconds.
		Weight::from_parts(264_079_921, 91620)
			// Standard Error: 99_319
			.saturating_add(Weight::from_parts(1_060_847, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(28_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_normal(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `14492`
		//  Estimated: `53371`
		// Minimum execution time: 261_716_000 picoseconds.
		Weight::from_parts(602_031_052, 53371)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn transfer_avatar_organizer(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `14590`
		//  Estimated: `53371`
		// Minimum execution time: 269_080_000 picoseconds.
		Weight::from_parts(546_040_392, 53371)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn transfer_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273`
		//  Estimated: `15679`
		// Minimum execution time: 70_760_000 picoseconds.
		Weight::from_parts(96_593_000, 15679)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:0)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:0 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1239`
		//  Estimated: `12326`
		// Minimum execution time: 74_513_000 picoseconds.
		Weight::from_parts(147_450_000, 12326)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn remove_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1309`
		//  Estimated: `8763`
		// Minimum execution time: 69_836_000 picoseconds.
		Weight::from_parts(80_675_000, 8763)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:1)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:3)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:2 w:2)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn buy(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654 + n * (65 ±0)`
		//  Estimated: `53919`
		// Minimum execution time: 198_708_000 picoseconds.
		Weight::from_parts(432_442_362, 53919)
			// Standard Error: 139_740
			.saturating_add(Weight::from_parts(571_915, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	fn upgrade_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `20314`
		// Minimum execution time: 112_538_000 picoseconds.
		Weight::from_parts(314_589_000, 20314)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:0 w:1)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_organizer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 38_751_000 picoseconds.
		Weight::from_parts(47_772_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:0 w:1)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_collection_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 41_680_000 picoseconds.
		Weight::from_parts(61_092_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Treasurer (r:0 w:1)
	/// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	fn set_treasurer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 28_766_000 picoseconds.
		Weight::from_parts(47_137_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Treasurer (r:1 w:0)
	/// Proof: AwesomeAvatars Treasurer (max_values: None, max_size: Some(34), added: 2509, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CurrentSeasonStatus (r:1 w:0)
	/// Proof: AwesomeAvatars CurrentSeasonStatus (max_values: Some(1), max_size: Some(9), added: 504, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:0)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Treasury (r:1 w:1)
	/// Proof: AwesomeAvatars Treasury (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_treasury() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1657`
		//  Estimated: `19289`
		// Minimum execution time: 88_285_000 picoseconds.
		Weight::from_parts(202_183_000, 19289)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Seasons (r:1 w:1)
	/// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1152), added: 3627, mode: MaxEncodedLen)
	fn set_season() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `6134`
		// Minimum execution time: 56_283_000 picoseconds.
		Weight::from_parts(92_760_000, 6134)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:0 w:1)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	fn update_global_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `1517`
		// Minimum execution time: 30_453_000 picoseconds.
		Weight::from_parts(70_829_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Organizer (r:1 w:0)
	/// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:1)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	fn set_free_mints() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `9045`
		// Minimum execution time: 46_165_000 picoseconds.
		Weight::from_parts(73_012_000, 9045)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nft Item (r:1 w:1)
	/// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	/// Storage: Nft Collection (r:1 w:1)
	/// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nft CollectionConfigOf (r:1 w:0)
	/// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nft ItemConfigOf (r:1 w:1)
	/// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nft Attribute (r:6 w:6)
	/// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	/// Storage: NftTransfer NftStatuses (r:0 w:1)
	/// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Nft Account (r:0 w:1)
	/// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn lock_avatar(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1490 + n * (34 ±0)`
		//  Estimated: `79884`
		// Minimum execution time: 394_602_000 picoseconds.
		Weight::from_parts(917_538_684, 79884)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(17_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Owners (r:2 w:2)
	/// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6434), added: 8909, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Accounts (r:1 w:0)
	/// Proof: AwesomeAvatars Accounts (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars CollectionId (r:1 w:0)
	/// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NftTransfer NftStatuses (r:1 w:1)
	/// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
	/// Storage: Nft Attribute (r:6 w:6)
	/// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
	/// Storage: Nft Collection (r:1 w:1)
	/// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nft ItemConfigOf (r:1 w:1)
	/// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// Storage: Nft Item (r:1 w:1)
	/// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nft ItemMetadataOf (r:1 w:0)
	/// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
	/// Storage: Nft Account (r:0 w:1)
	/// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
	/// Storage: Nft ItemPriceOf (r:0 w:1)
	/// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
	/// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
	/// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
	/// Storage: Nft PendingSwapOf (r:0 w:1)
	/// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 200]`.
	fn unlock_avatar(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2274 + n * (34 ±0)`
		//  Estimated: `79981`
		// Minimum execution time: 374_904_000 picoseconds.
		Weight::from_parts(439_025_748, 79981)
			// Standard Error: 166_769
			.saturating_add(Weight::from_parts(2_161_716, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(19_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:1)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	fn fix_variation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3637`
		// Minimum execution time: 19_054_000 picoseconds.
		Weight::from_parts(19_570_000, 3637)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_service_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_240_000 picoseconds.
		Weight::from_parts(47_057_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Trade (r:1 w:0)
	/// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
	/// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn prepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `649`
		//  Estimated: `23552`
		// Minimum execution time: 190_495_000 picoseconds.
		Weight::from_parts(209_675_000, 23552)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AwesomeAvatars Avatars (r:1 w:0)
	/// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(172), added: 2647, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn unprepare_avatar() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `8829`
		// Minimum execution time: 39_953_000 picoseconds.
		Weight::from_parts(42_917_000, 8829)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
	/// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
	/// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(128), added: 623, mode: MaxEncodedLen)
	/// Storage: AwesomeAvatars Preparation (r:1 w:1)
	/// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	fn prepare_ipfs() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `6709`
		// Minimum execution time: 90_643_000 picoseconds.
		Weight::from_parts(97_488_000, 6709)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
