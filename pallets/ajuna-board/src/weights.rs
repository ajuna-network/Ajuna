// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_board
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-11, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/ajuna-solo
// benchmark
// pallet
// --chain=dev
// --pallet
// pallet-ajuna-board
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/ajuna-board/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_board.
pub trait WeightInfo {
	fn new_game() -> Weight;
	fn play_turn() -> Weight;
	fn play_turn_until_finished() -> Weight;
	fn finish_game() -> Weight;
}

/// Weights for pallet_ajuna_board using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board PlayerBoards (r:2 w:2)
	// Storage: Board Seed (r:1 w:0)
	fn new_game() -> Weight {
		(11_192_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Board PlayerBoards (r:1 w:0)
	// Storage: Board BoardStates (r:1 w:1)
	fn play_turn() -> Weight {
		(5_580_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Board PlayerBoards (r:1 w:0)
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board Seed (r:0 w:1)
	// Storage: Board BoardWinners (r:0 w:1)
	fn play_turn_until_finished() -> Weight {
		(12_263_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board BoardWinners (r:0 w:1)
	// Storage: Board PlayerBoards (r:0 w:2)
	fn finish_game() -> Weight {
		(4_047_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board PlayerBoards (r:2 w:2)
	// Storage: Board Seed (r:1 w:0)
	fn new_game() -> Weight {
		(11_192_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Board PlayerBoards (r:1 w:0)
	// Storage: Board BoardStates (r:1 w:1)
	fn play_turn() -> Weight {
		(5_580_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Board PlayerBoards (r:1 w:0)
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board Seed (r:0 w:1)
	// Storage: Board BoardWinners (r:0 w:1)
	fn play_turn_until_finished() -> Weight {
		(12_263_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Board BoardStates (r:1 w:1)
	// Storage: Board BoardWinners (r:0 w:1)
	// Storage: Board PlayerBoards (r:0 w:2)
	fn finish_game() -> Weight {
		(4_047_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
}
