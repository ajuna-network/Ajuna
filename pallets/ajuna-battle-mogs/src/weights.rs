// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_battle_mogs
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-battle-mogs
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/battle-mogs/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_battle_mogs.
pub trait WeightInfo {
	fn set_organizer() -> Weight;
	fn update_config() -> Weight;
	fn set_price() -> Weight;
	fn remove_price() -> Weight;
	fn create_mogwai() -> Weight;
	fn remove_mogwai() -> Weight;
	fn transfer() -> Weight;
	fn hatch_mogwai() -> Weight;
	fn sacrifice() -> Weight;
	fn sacrifice_into() -> Weight;
	fn buy_mogwai() -> Weight;
	fn morph_mogwai() -> Weight;
	fn breed_mogwai() -> Weight;
}

/// Weights for pallet_battle_mogs using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: BattleMogs Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		Weight::from_parts(35_212_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs AccountConfig (r:1 w:1)
	// Storage: BattleMogs Organizer (r:1 w:0)
	fn update_config() -> Weight {
		Weight::from_parts(79_832_000, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:0)
	// Storage: BattleMogs MogwaiPrices (r:0 w:1)
	fn set_price() -> Weight {
		Weight::from_parts(52_145_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:0)
	// Storage: BattleMogs MogwaiPrices (r:1 w:1)
	fn remove_price() -> Weight {
		Weight::from_parts(60_203_000, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: BattleMogs Nonce (r:1 w:1)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	fn create_mogwai() -> Weight {
		Weight::from_parts(116_283_000, 0)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Organizer (r:1 w:0)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	fn remove_mogwai() -> Weight {
		Weight::from_parts(111_877_000, 0)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: BattleMogs Organizer (r:1 w:0)
	// Storage: BattleMogs OwnedMogwaisCount (r:2 w:2)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: BattleMogs Owners (r:2 w:2)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	fn transfer() -> Weight {
		Weight::from_parts(119_581_000, 0)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: System BlockHash (r:1 w:0)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn hatch_mogwai() -> Weight {
		Weight::from_parts(69_707_000, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn sacrifice() -> Weight {
		Weight::from_parts(125_590_000, 0)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Mogwais (r:2 w:2)
	// Storage: BattleMogs MogwaiPrices (r:2 w:0)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn sacrifice_into() -> Weight {
		Weight::from_parts(126_634_000, 0)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: BattleMogs MogwaiPrices (r:1 w:1)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:2 w:2)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: BattleMogs Owners (r:2 w:2)
	// Storage: BattleMogs AccountAchievements (r:2 w:2)
	fn buy_mogwai() -> Weight {
		Weight::from_parts(304_112_000, 0)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn morph_mogwai() -> Weight {
		Weight::from_parts(165_533_000, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: BattleMogs Mogwais (r:3 w:2)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: BattleMogs Nonce (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	fn breed_mogwai() -> Weight {
		Weight::from_parts(276_005_000, 0)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: BattleMogs Organizer (r:0 w:1)
	fn set_organizer() -> Weight {
		Weight::from_parts(35_212_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs AccountConfig (r:1 w:1)
	// Storage: BattleMogs Organizer (r:1 w:0)
	fn update_config() -> Weight {
		Weight::from_parts(79_832_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:0)
	// Storage: BattleMogs MogwaiPrices (r:0 w:1)
	fn set_price() -> Weight {
		Weight::from_parts(52_145_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:0)
	// Storage: BattleMogs MogwaiPrices (r:1 w:1)
	fn remove_price() -> Weight {
		Weight::from_parts(60_203_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: BattleMogs Nonce (r:1 w:1)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	fn create_mogwai() -> Weight {
		Weight::from_parts(116_283_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Organizer (r:1 w:0)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	fn remove_mogwai() -> Weight {
		Weight::from_parts(111_877_000, 0)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: BattleMogs Organizer (r:1 w:0)
	// Storage: BattleMogs OwnedMogwaisCount (r:2 w:2)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: BattleMogs Owners (r:2 w:2)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	fn transfer() -> Weight {
		Weight::from_parts(119_581_000, 0)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: System BlockHash (r:1 w:0)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn hatch_mogwai() -> Weight {
		Weight::from_parts(69_707_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn sacrifice() -> Weight {
		Weight::from_parts(125_590_000, 0)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	// Storage: BattleMogs Mogwais (r:2 w:2)
	// Storage: BattleMogs MogwaiPrices (r:2 w:0)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn sacrifice_into() -> Weight {
		Weight::from_parts(126_634_000, 0)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	// Storage: BattleMogs MogwaiPrices (r:1 w:1)
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs OwnedMogwaisCount (r:2 w:2)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: BattleMogs Owners (r:2 w:2)
	// Storage: BattleMogs AccountAchievements (r:2 w:2)
	fn buy_mogwai() -> Weight {
		Weight::from_parts(304_112_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	// Storage: BattleMogs Mogwais (r:1 w:1)
	// Storage: BattleMogs MogwaiPrices (r:1 w:0)
	// Storage: BattleMogs AccountAchievements (r:1 w:1)
	fn morph_mogwai() -> Weight {
		Weight::from_parts(165_533_000, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: BattleMogs Mogwais (r:3 w:2)
	// Storage: BattleMogs OwnedMogwaisCount (r:1 w:1)
	// Storage: BattleMogs AccountConfig (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: BattleMogs Nonce (r:1 w:1)
	// Storage: BattleMogs Owners (r:1 w:1)
	// Storage: BattleMogs AllMogwaisCount (r:1 w:1)
	fn breed_mogwai() -> Weight {
		Weight::from_parts(276_005_000, 0)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
}
