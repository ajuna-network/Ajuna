// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_nft_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weight-calculation-didac`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-nft-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/nft-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_nft_staking.
pub trait WeightInfo {
	fn fund_treasury() -> Weight;
	fn submit_staking_contract_token_reward() -> Weight;
	fn submit_staking_contract_nft_reward() -> Weight;
	fn take_staking_contract() -> Weight;
	fn redeem_staking_contract_token_reward() -> Weight;
	fn redeem_staking_contract_nft_reward() -> Weight;
}

/// Weights for pallet_ajuna_nft_staking using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn fund_treasury() -> Weight {
		// Minimum execution time: 114_448 nanoseconds.
		Weight::from_ref_time(181_163_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFTStake NextContractId (r:1 w:1)
	// Storage: NFT Item (r:1 w:1)
	// Storage: NFT Collection (r:1 w:1)
	// Storage: NFT CollectionConfigOf (r:1 w:0)
	// Storage: NFT ItemConfigOf (r:1 w:1)
	// Storage: NFT Account (r:0 w:1)
	// Storage: NFTStake ActiveContracts (r:0 w:1)
	fn submit_staking_contract_token_reward() -> Weight {
		// Minimum execution time: 258_032 nanoseconds.
		Weight::from_ref_time(356_431_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: NFT Item (r:2 w:2)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:2 w:1)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:2 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake NextContractId (r:1 w:1)
	// Storage: NFT Account (r:0 w:3)
	// Storage: NFT ItemPriceOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:1)
	// Storage: NFTStake ActiveContracts (r:0 w:1)
	fn submit_staking_contract_nft_reward() -> Weight {
		// Minimum execution time: 276_811 nanoseconds.
		Weight::from_ref_time(437_074_000 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ActiveContracts (r:1 w:0)
	// Storage: NFT Attribute (r:10 w:0)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Item (r:11 w:11)
	// Storage: NFT Collection (r:2 w:0)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:11 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFT Account (r:0 w:22)
	// Storage: NFT ItemPriceOf (r:0 w:11)
	// Storage: NFT PendingSwapOf (r:0 w:11)
	// Storage: NFTStake ContractDurations (r:0 w:1)
	// Storage: NFTStake ContractStakedAssets (r:0 w:1)
	fn take_staking_contract() -> Weight {
		// Minimum execution time: 2_075_627 nanoseconds.
		Weight::from_ref_time(2_261_672_000 as u64)
			.saturating_add(T::DbWeight::get().reads(41 as u64))
			.saturating_add(T::DbWeight::get().writes(59 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ContractDurations (r:1 w:1)
	// Storage: NFTStake ContractStakedAssets (r:1 w:1)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:2 w:1)
	// Storage: NFT CollectionConfigOf (r:1 w:0)
	// Storage: NFT ItemConfigOf (r:11 w:1)
	// Storage: NFT Item (r:11 w:11)
	// Storage: NFTStake ActiveContracts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFT Account (r:0 w:21)
	// Storage: NFT ItemPriceOf (r:0 w:11)
	// Storage: NFT ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:11)
	fn redeem_staking_contract_token_reward() -> Weight {
		// Minimum execution time: 842_348 nanoseconds.
		Weight::from_ref_time(954_613_000 as u64)
			.saturating_add(T::DbWeight::get().reads(32 as u64))
			.saturating_add(T::DbWeight::get().writes(62 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ContractDurations (r:1 w:1)
	// Storage: NFTStake ContractStakedAssets (r:1 w:1)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:3 w:1)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:12 w:1)
	// Storage: NFT Item (r:12 w:12)
	// Storage: NFTStake ActiveContracts (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFT Account (r:0 w:23)
	// Storage: NFT ItemPriceOf (r:0 w:12)
	// Storage: NFT ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:12)
	fn redeem_staking_contract_nft_reward() -> Weight {
		// Minimum execution time: 870_118 nanoseconds.
		Weight::from_ref_time(966_765_000 as u64)
			.saturating_add(T::DbWeight::get().reads(36 as u64))
			.saturating_add(T::DbWeight::get().writes(67 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn fund_treasury() -> Weight {
		// Minimum execution time: 114_448 nanoseconds.
		Weight::from_ref_time(181_163_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFTStake NextContractId (r:1 w:1)
	// Storage: NFT Item (r:1 w:1)
	// Storage: NFT Collection (r:1 w:1)
	// Storage: NFT CollectionConfigOf (r:1 w:0)
	// Storage: NFT ItemConfigOf (r:1 w:1)
	// Storage: NFT Account (r:0 w:1)
	// Storage: NFTStake ActiveContracts (r:0 w:1)
	fn submit_staking_contract_token_reward() -> Weight {
		// Minimum execution time: 258_032 nanoseconds.
		Weight::from_ref_time(356_431_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: NFT Item (r:2 w:2)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:2 w:1)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:2 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake NextContractId (r:1 w:1)
	// Storage: NFT Account (r:0 w:3)
	// Storage: NFT ItemPriceOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:1)
	// Storage: NFTStake ActiveContracts (r:0 w:1)
	fn submit_staking_contract_nft_reward() -> Weight {
		// Minimum execution time: 276_811 nanoseconds.
		Weight::from_ref_time(437_074_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(12 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ActiveContracts (r:1 w:0)
	// Storage: NFT Attribute (r:10 w:0)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Item (r:11 w:11)
	// Storage: NFT Collection (r:2 w:0)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:11 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFT Account (r:0 w:22)
	// Storage: NFT ItemPriceOf (r:0 w:11)
	// Storage: NFT PendingSwapOf (r:0 w:11)
	// Storage: NFTStake ContractDurations (r:0 w:1)
	// Storage: NFTStake ContractStakedAssets (r:0 w:1)
	fn take_staking_contract() -> Weight {
		// Minimum execution time: 2_075_627 nanoseconds.
		Weight::from_ref_time(2_261_672_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(41 as u64))
			.saturating_add(RocksDbWeight::get().writes(59 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ContractDurations (r:1 w:1)
	// Storage: NFTStake ContractStakedAssets (r:1 w:1)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:2 w:1)
	// Storage: NFT CollectionConfigOf (r:1 w:0)
	// Storage: NFT ItemConfigOf (r:11 w:1)
	// Storage: NFT Item (r:11 w:11)
	// Storage: NFTStake ActiveContracts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: NFT Account (r:0 w:21)
	// Storage: NFT ItemPriceOf (r:0 w:11)
	// Storage: NFT ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:11)
	fn redeem_staking_contract_token_reward() -> Weight {
		// Minimum execution time: 842_348 nanoseconds.
		Weight::from_ref_time(954_613_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(32 as u64))
			.saturating_add(RocksDbWeight::get().writes(62 as u64))
	}
	// Storage: NFTStake ContractOwners (r:1 w:1)
	// Storage: NFTStake ContractDurations (r:1 w:1)
	// Storage: NFTStake ContractStakedAssets (r:1 w:1)
	// Storage: NFTStake TreasuryAccount (r:1 w:0)
	// Storage: NFT Collection (r:3 w:1)
	// Storage: NFT CollectionConfigOf (r:2 w:0)
	// Storage: NFT ItemConfigOf (r:12 w:1)
	// Storage: NFT Item (r:12 w:12)
	// Storage: NFTStake ActiveContracts (r:1 w:1)
	// Storage: NFTStake ContractCollectionId (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: NFT Account (r:0 w:23)
	// Storage: NFT ItemPriceOf (r:0 w:12)
	// Storage: NFT ItemAttributesApprovalsOf (r:0 w:1)
	// Storage: NFT PendingSwapOf (r:0 w:12)
	fn redeem_staking_contract_nft_reward() -> Weight {
		// Minimum execution time: 870_118 nanoseconds.
		Weight::from_ref_time(966_765_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(36 as u64))
			.saturating_add(RocksDbWeight::get().writes(67 as u64))
	}
}
